Execucte the command on command line: 

py Project.py

There will be a prompt to enter a query 
Then go on to execute the queries under each section one by one, starting with the query under select and so on. 


1) Crime Dataset

i) select
PRESENT crime_month,crime_city THIS crime_dataset

ii) where
PRESENT crime_city,severity_level THIS crime_dataset MENTIONED severity_level = 7 OR severity_level = 5

iii) orderby
PRESENT crime_city,current_status,victim_count THIS crime_dataset MENTIONED crime_city = 'Los Angeles' SORT victim_count STRAIGHT

iv) aggregation without groupby
PRESENT LEAST(victim_count),MEAN(severity_level) THIS crime_dataset MENTIONED crime_city = 'Los Angeles'

v) aggregation with groupby
PRESENT MEAN(victim_count) THIS crime_dataset CLUSTER crime_city

vi) everything combined
PRESENT MEAN(victim_count),MEAN(severity_level) THIS crime_dataset MENTIONED crime_city = 'El Paso' CLUSTER crime_type SORT severity_level_custom_average STRAIGHT

vii) update
CHANGE crime_dataset FOR current_status = Open MENTIONED severity_level == 1

viii) insert
ADD THIS crime_dataset (crime_id, crime_month, crime_city, crime_type, severity_level, victim_count, current_status) VALUES (123, 2023-12, New York, Robbery, High, 3, Under Investigation)

x) delete
EVAPORATE THIS crime_dataset MENTIONED current_status == 'Investigating'


LA_crime_Dataset

i) select
PRESENT area_name, crm_cd_desc THIS la_crime_dataset

ii) where
PRESENT area_name, crm_cd_desc THIS la_crime_dataset MENTIONED vict_age > 90

iii) orderby
PRESENT vict_sex THIS la_crime_dataset MENTIONED area_name = 'Harbor' SORT vict_age STRAIGHT

iv) aggregation without groupby
PRESENT LEAST(vict_age) THIS la_crime_dataset MENTIONED area_name = 'Harbor'

v) aggregation with groupby
PRESENT MEAN(vict_age) THIS la_crime_dataset CLUSTER area_name




File Structure 

1) There is only one file Project.py which has all the code. The function defined and used in the Project.py descriptions is given in the report.

2) parsetab.py is a file automatically generated by the PLY parsing tool when you use it to define and create parsers in Python. This file typically contains tables and data structures that represent the grammar rules and parsing information specified in your PLY parser. 

3) parser.out is a file generated by the PLY (Python Lex-Yacc) parsing tool during the parsing process. This file contains detailed information and diagnostics about the parsing process, including any warnings, errors, conflicts, or debugging information 

4) There exists a data folder which has 3 datasets that were used to test the code. 	-Some buffer folders like temp_filer, temp_sorted etc, which store the chunks temporarily. 
	-The result folder stores the result of each query and is deleted once another query is executed. 